NIOS II For Quartus Prime 

C code that uses parallel ports

ParallelPorts

.include "address_map_nios2.s"
/ * This program demonstrates use of parallel ports * * It performs the following: * 1. displays a rotating pattern on the LEDs * 2. if any KEY is pressed, the SW switches are used as the rotating pattern ******************************************************************************/
.text # executable code follows .global _start _start:
/* initialize base addresses of parallel ports */ movia r15, SW_BASE # SW slider switch base address movia r16, LED_BASE # LED base address movia r17, KEY_BASE # pushbutton KEY base address movia r18, LED_bits ldwio r6, 0(r18) # load pattern for LED lights
DO_DISPLAY: ldwio r4, 0(r15) # load slider switches
ldwio r5, 0(r17) # load pushbuttons beq r5, r0, NO_BUTTON mov r6, r4 # copy SW switch values onto LEDs roli r4, r4, 8 # the SW values are copied into the upper three # bytes of the pattern register or r6, r6, r4 # needed to make pattern consistent as all # 32-bits of a register are rotated roli r4, r4, 8 # but only the lowest 8-bits are displayed on # LEDs or r6, r6, r4 roli r4, r4, 8 or r6, r6, r4
WAIT:
ldwio r5, 0(r17) # load pushbuttons bne r5, r0, WAIT # wait for button release
NO_BUTTON: stwio r6, 0(r16) # store to LED roli r6, r6, 1 # rotate the displayed pattern

movia r7, 1500000 # delay counter
DELAY:
subi r7, r7, 1 bne r7, r0, DELAY
br DO_DISPLAY
/*/ .data # data follows
LED_bits: .word 0x0F0F0F0F
.end

#include "address_map_nios2.h" /* This program demonstrates use of parallel ports in the Computer System * * It performs the following: * 1. displays a rotating pattern on the LEDs * 2. if a KEY is pressed, uses the SW switches as the pattern */ int main(void) { /* Declare volatile pointers to I/O registers (volatile means that IO load * and store instructions will be used to access these pointer locations, * instead of regular memory loads and stores) */ volatile int * LED_ptr = (int *)LED_BASE; // LED address volatile int * SW_switch_ptr = (int *)SW_BASE; // SW slider switch address volatile int * KEY_ptr = (int *)KEY_BASE; // pushbutton KEY address
int LED_bits = 0x0F0F0F0F; // pattern for LED lights int SW_value, KEY_value; volatile int delay_count; // volatile so the C compiler doesnâ€™t remove the loop
while (1) { SW_value = *(SW_switch_ptr); // read the SW slider (DIP) switch values
KEY_value = *(KEY_ptr); // read the pushbutton KEY values if (KEY_value != 0) // check if any KEY was pressed { /* set pattern using SW values */ LED_bits = SW_value | (SW_value << 8) | (SW_value << 16) | (SW_value << 24); while (*KEY_ptr) ; // wait for pushbutton KEY release } *(LED_ptr) = LED_bits; // light up the LEDs
/* rotate the pattern shown on the LEDs */ if (LED_bits & 0x80000000) LED_bits = (LED_bits << 1) | 1; else LED_bits = LED_bits << 1;
for (delay_count = 350000; delay_count != 0; --delay_count) ; // delay loop
}
}
