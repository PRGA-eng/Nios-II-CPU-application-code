NIOS II For Quartus Prime 

9.2 JTAG*UART

.include "address_map_nios2.s"

/ * This program demonstrates use of the JTAG UART port * * It performs the following: * 1. sends a text string to the JTAG UART * 2. reads character data from the JTAG UART * 3. echos the character data back to the JTAG UART *****************************************************************************/
.text # executable code follows .global _start _start: /* set up stack pointer */ movia sp, SDRAM_END - 3 # starts from largest memory address
movia r6, JTAG_UART_BASE # JTAG UART base address
/* print a text string */ movia r8, TEXT_STRING LOOP: ldb r5, 0(r8) beq r5, zero, GET_JTAG # string is null-terminated call PUT_JTAG addi r8, r8, 1 br LOOP
/* read and echo characters */ GET_JTAG: ldwio r4, 0(r6) # read the JTAG UART data register andi r8, r4, 0x8000 # check if there is new data beq r8, r0, GET_JTAG # if no data, wait andi r5, r4, 0x00ff # the data is in the least significant byte
call PUT_JTAG # echo character br GET_JTAG
/* Subroutine to send a character to the JTAG UART * r5 = character to send * r6 = JTAG UART base address */ .global PUT_JTAG PUT_JTAG: /* save any modified registers */ Listing 3. An example of assembly language code that uses the JTAG UART (Part a).

subi sp, sp, 4 # reserve space on the stack stw r4, 0(sp) # save register
ldwio r4, 4(r6) # read the JTAG UART control register andhi r4, r4, 0xffff # check for write space beq r4, r0, END_PUT # if no space, ignore the character stwio r5, 0(r6) # send the character
END_PUT: /* restore registers */ ldw r4, 0(sp) addi sp, sp, 4
ret
/*/ .data

#include "JTAG_UART.h" #include "address_map_nios2.h"
/* Subroutine to send a character to the JTAG UART */ void put_jtag(volatile int * JTAG_UART_ptr, char c) { int control; control = *(JTAG_UART_ptr + 1); // read the JTAG_UART control register if (control & 0xFFFF0000) // if space, echo character, else ignore *(JTAG_UART_ptr) = c; }
/* Subroutine to read a character from the JTAG UART * Returns \0 if no character, otherwise returns the character */ char get_jtag(volatile int * JTAG_UART_ptr) { int data; data = *(JTAG_UART_ptr); // read the JTAG_UART data register if (data & 0x00008000) // check RVALID to see if there is new data return ((char)data & 0xFF); else return (’\0’); } Listing 4. An example of C code that uses the JTAG UART (Part a).

#include "JTAG_UART.h" #include "address_map_nios2.h"
/* This program demonstrates use of the JTAG UART port * * It performs the following: * 1. sends a text string to the JTAG UART * 2. reads character data from the JTAG UART * 3. echos the character data back to the JTAG UART ******************************************************************************/ int main(void) { /* Declare volatile pointers to I/O registers (volatile means that IO load and store instructions will be used to access these pointer locations, instead of regular memory loads and stores) */ volatile int * JTAG_UART_ptr = (int *)JTAG_UART_BASE; // JTAG UART address
char text_string[] = "\nJTAG UART example code\n> \0"; char *str, c;
/* print a text string */ for (str = text_string; *str != 0; ++str) put_jtag(JTAG_UART_ptr, *str);
/* read and echo characters */ while (1) { c = get_jtag(JTAG_UART_ptr); if (c != ’\0’) put_jtag(JTAG_UART_ptr, c); }
}

